version: '3.8'

services:
  zookeeper-1:
    hostname: zookeeper1
    container_name: zookeeper1

    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 12181
      ZOOKEEPER_DATA_DIR: kafkalogging/zookeeper/data
      ZOOKEEPER_SERVERS: zookeeper1:22888:23888;zookeeper2:32888:33888;zookeeper3:42888:43888
    ports:
      - 12181:12181
      - 22888:22888
      - 23888:23888
    volumes:
      - .kafkalogging/zookeeper/data/1:/zookeeper/data
    networks:
      - kafka-network

  zookeeper-2:
    hostname: zookeeper2
    container_name: zookeeper2

    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_DATA_DIR: kafkalogging/zookeeper/data
      ZOOKEEPER_SERVERS: zookeeper1:22888:23888;zookeeper2:32888:33888;zookeeper3:42888:43888
    ports:
      - 22181:22181
      - 32888:32888
      - 33888:33888
    volumes:
      - .kafkalogging/zookeeper/data/2:/zookeeper/data
    networks:
      - kafka-network

  zookeeper-3:
    hostname: zookeeper3
    container_name: zookeeper3

    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_DATA_DIR: kafkalogging/zookeeper/data
      ZOOKEEPER_SERVERS: zookeeper1:22888:23888;zookeeper2:32888:33888;zookeeper3:42888:43888
    ports:
      - 32181:32181
      - 42888:42888
      - 43888:43888
    volumes:
      - .kafkalogging/zookeeper/data/3:/zookeeper/data
    networks:
      - kafka-network

  kafka-1:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka1
    container_name: kafka1

    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:12181,zookeeper2:22181,zookeeper3:32181
      KAFKA_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://kafka-1:19094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://localhost:19094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: kafkalogging/kafka
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9997:/usr/share/jmx_exporter/kafka-jmx-metric.yml
    ports:
      - 19092:19092
      - 19094:19094
      - 9997:9999
    volumes:
      - ./jmx_exporter:/usr/share/jmx_exporter/
      - .kafkalogging/kafka/logs/1:/kafka
    networks:
      - kafka-network

  kafka-2:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka2
    container_name: kafka2

    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:12181,zookeeper2:22181,zookeeper3:32181
      KAFKA_LISTENERS: INTERNAL://kafka-2:29092,EXTERNAL://kafka-2:29094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:29092,EXTERNAL://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: kafkalogging/kafka
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9998:/usr/share/jmx_exporter/kafka-jmx-metric.yml
    ports:
      - 29092:29092
      - 29094:29094
      - 9998:9999
    volumes:
      - ./jmx_exporter:/usr/share/jmx_exporter/
      - .kafkalogging/kafka/logs/2:/kafka
    networks:
      - kafka-network

  kafka-3:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka3
    container_name: kafka3

    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:12181,zookeeper2:22181,zookeeper3:32181
      KAFKA_LISTENERS: INTERNAL://kafka-3:39092,EXTERNAL://kafka-3:39094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:39092,EXTERNAL://localhost:39094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: kafkalogging/kafka
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9999:/usr/share/jmx_exporter/kafka-jmx-metric.yml
    ports:
      - 39092:39092
      - 39094:39094
      - 9999:9999
    volumes:
      - ./jmx_exporter:/usr/share/jmx_exporter/
      - .kafkalogging/kafka/logs/3:/kafka
    networks:
      - kafka-network

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.7.1
    hostname: kafka-connect
    container_name: kafka-connect
    env_file:
      - .env
      - kafka-connect.env
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - minio
      - mc
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:29092,kafka3:39092
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION: "us-east-1"
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_PATH_STYLE_ACCESS: 'true'
    command: >
      bash -c "
        confluent-hub install --no-prompt confluentinc/kafka-connect-s3:latest &&
        /etc/confluent/docker/run
      "
    volumes:
      - connect-offsets:/tmp/kafka-connect
    ports:
      - "8083:8083"
    networks:
      - kafka-network

  akhq:
    image: tchiotludo/akhq:latest
    hostname: akhq
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: kafka1:19092,kafka2:29092,kafka3:39092
    ports:
      - 8081:8080
    networks:
      - kafka-network

  grafana:
    image: grafana/grafana-oss:11.2.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - ./visualization/grafana:/var/lib/grafana
    networks:
      - kafka-network
    command: >
      sh -c "chown -R grafana:grafana /var/lib/grafana && /run.sh"

  prometheus:
    image: prom/prometheus
    user: root
    container_name: prometheus
    volumes:
      - ./visualization/prometheus/config:/etc/prometheus
      - ./visualization/prometheus/volume:/prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
      - --storage.tsdb.path=/prometheus
    restart: unless-stopped
    networks:
      - kafka-network
    
  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka1:19092
      - --kafka.server=kafka2:29092
      - --kafka.server=kafka3:39092 
    networks:
      - kafka-network
    restart: unless-stopped
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  minio:
    image: minio/minio
    container_name: minio
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio/data:/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mc:
    image: minio/mc
    container_name: minio_mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD})
      do sleep 5; done;
      /usr/bin/mc mb myminio/${S3_BUCKET_NAME};
      "
    networks:
      - kafka-network

  kafka-connect-ui:
    image: landoop/kafka-connect-ui
    container_name: kafka-connect-ui
    environment:
      CONNECT_URL: http://kafka-connect:8083
    ports:
      - "8082:8000"
    depends_on:
      - kafka-connect
    networks:
      - kafka-network

networks:
  kafka-network:
    external: true

volumes:
  connect-offsets: